{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap, withLatestFrom } from 'rxjs/operators';\nimport { decrement, increment, reset, saveError, saveSuccess } from '../actions/counter.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@ngrx/store\";\nimport * as i3 from \"../services/counter-api.service\";\nexport class CounterEffects {\n  constructor(actions$, store$, counterApiService) {\n    this.actions$ = actions$;\n    this.store$ = store$;\n    this.counterApiService = counterApiService;\n    /*\n     * Listens for counter changes and sends the state to the server.\n     * Dispatches SAVE_SUCCESS or SAVE_ERROR.\n     */\n    this.saveOnChange$ = createEffect(() => this.actions$.pipe(ofType(increment, decrement, reset), withLatestFrom(this.store$), mergeMap(([_, state]) => this.counterApiService.saveCounter(state.counter).pipe(map(() => saveSuccess()), catchError(error => of(saveError({\n      error\n    })))))));\n  }\n}\nCounterEffects.ɵfac = function CounterEffects_Factory(t) {\n  return new (t || CounterEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.Store), i0.ɵɵinject(i3.CounterApiService));\n};\nCounterEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CounterEffects,\n  factory: CounterEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAE7D,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,cAAc,QAAQ,gBAAgB;AAE1E,SACEC,SAAS,EACTC,SAAS,EACTC,KAAK,EACLC,SAAS,EACTC,WAAW,QACN,4BAA4B;;;;;AAKnC,OAAM,MAAOC,cAAc;EACzBC,YACUC,QAAiB,EACjBC,MAAuB,EACvBC,iBAAoC;IAFpC,aAAQ,GAARF,QAAQ;IACR,WAAM,GAANC,MAAM;IACN,sBAAiB,GAAjBC,iBAAiB;IAG3B;;;;IAIO,kBAAa,GAAGhB,YAAY,CAAC,MAClC,IAAI,CAACc,QAAQ,CAACG,IAAI,CAChBhB,MAAM,CAACO,SAAS,EAAED,SAAS,EAAEE,KAAK,CAAC,EACnCH,cAAc,CAAC,IAAI,CAACS,MAAM,CAAC,EAC3BV,QAAQ,CAAC,CAAC,CAACa,CAAC,EAAEC,KAAK,CAAC,KAClB,IAAI,CAACH,iBAAiB,CAACI,WAAW,CAACD,KAAK,CAACE,OAAO,CAAC,CAACJ,IAAI,CACpDb,GAAG,CAAC,MAAMO,WAAW,EAAE,CAAC,EACxBR,UAAU,CAAEmB,KAAK,IAAKpB,EAAE,CAACQ,SAAS,CAAC;MAAEY;IAAK,CAAE,CAAC,CAAC,CAAC,CAChD,CACF,CACF,CACF;EAjBE;;AALQV,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAW,SAAdX,cAAc;AAAA","names":["createEffect","ofType","of","catchError","map","mergeMap","withLatestFrom","decrement","increment","reset","saveError","saveSuccess","CounterEffects","constructor","actions$","store$","counterApiService","pipe","_","state","saveCounter","counter","error","factory"],"sourceRoot":"","sources":["/home/bruno/Documents/GitHub/utilizando_cypress/src/app/effects/counter.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap, withLatestFrom } from 'rxjs/operators';\n\nimport {\n  decrement,\n  increment,\n  reset,\n  saveError,\n  saveSuccess,\n} from '../actions/counter.actions';\nimport { CounterApiService } from '../services/counter-api.service';\nimport { AppState } from '../shared/app-state';\n\n@Injectable()\nexport class CounterEffects {\n  constructor(\n    private actions$: Actions,\n    private store$: Store<AppState>,\n    private counterApiService: CounterApiService,\n  ) {}\n\n  /*\n   * Listens for counter changes and sends the state to the server.\n   * Dispatches SAVE_SUCCESS or SAVE_ERROR.\n   */\n  public saveOnChange$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(increment, decrement, reset),\n      withLatestFrom(this.store$),\n      mergeMap(([_, state]) =>\n        this.counterApiService.saveCounter(state.counter).pipe(\n          map(() => saveSuccess()),\n          catchError((error) => of(saveError({ error }))),\n        ),\n      ),\n    ),\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}