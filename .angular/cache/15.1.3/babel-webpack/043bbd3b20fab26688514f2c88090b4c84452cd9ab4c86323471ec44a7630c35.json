{"ast":null,"code":"import { select } from '@ngrx/store';\nimport { decrement, increment, reset } from '../../actions/counter.actions';\nimport { selectCounter } from '../../shared/selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\nexport class NgRxCounterComponent {\n  constructor(store) {\n    this.store = store;\n    this.count$ = store.pipe(select(selectCounter));\n  }\n  increment() {\n    this.store.dispatch(increment());\n  }\n  decrement() {\n    this.store.dispatch(decrement());\n  }\n  reset(newCount) {\n    const count = parseInt(newCount, 10);\n    if (!Number.isNaN(count)) {\n      this.store.dispatch(reset({\n        count\n      }));\n    }\n  }\n}\nNgRxCounterComponent.ɵfac = function NgRxCounterComponent_Factory(t) {\n  return new (t || NgRxCounterComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\nNgRxCounterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NgRxCounterComponent,\n  selectors: [[\"app-ngrx-counter\"]],\n  decls: 16,\n  vars: 3,\n  consts: [[\"data-testid\", \"count\"], [\"data-testid\", \"increment-button\", 3, \"click\"], [\"data-testid\", \"decrement-button\", 3, \"click\"], [\"type\", \"number\", \"data-testid\", \"reset-input\"], [\"input\", \"\"], [\"data-testid\", \"reset-button\", 3, \"click\"]],\n  template: function NgRxCounterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"NgRx counter\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\")(3, \"strong\", 0);\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"p\")(7, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function NgRxCounterComponent_Template_button_click_7_listener() {\n        return ctx.increment();\n      });\n      i0.ɵɵtext(8, \"+\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function NgRxCounterComponent_Template_button_click_9_listener() {\n        return ctx.decrement();\n      });\n      i0.ɵɵtext(10, \"-\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"p\");\n      i0.ɵɵelement(12, \"input\", 3, 4);\n      i0.ɵɵelementStart(14, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function NgRxCounterComponent_Template_button_click_14_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(13);\n        return i0.ɵɵresetView(ctx.reset(_r0.value));\n      });\n      i0.ɵɵtext(15, \"Reset\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 1, ctx.count$));\n    }\n  },\n  dependencies: [i2.AsyncPipe],\n  styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n  margin-bottom: 1rem;\\n  border: 4px solid darkgreen;\\n  border-radius: 2px;\\n  padding: 0 1rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9uZ3J4LWNvdW50ZXIvbmdyeC1jb3VudGVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsbUJBQW1CO0VBQ25CLDJCQUEyQjtFQUMzQixrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQiIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbi1ib3R0b206IDFyZW07XG4gIGJvcmRlcjogNHB4IHNvbGlkIGRhcmtncmVlbjtcbiAgYm9yZGVyLXJhZGl1czogMnB4O1xuICBwYWRkaW5nOiAwIDFyZW07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"],\n  changeDetection: 0\n});","map":{"version":3,"mappings":"AACA,SAASA,MAAM,QAAe,aAAa;AAG3C,SAASC,SAAS,EAAEC,SAAS,EAAEC,KAAK,QAAQ,+BAA+B;AAG3E,SAASC,aAAa,QAAQ,wBAAwB;;;;AAQtD,OAAM,MAAOC,oBAAoB;EAG/BC,YAAoBC,KAAsB;IAAtB,UAAK,GAALA,KAAK;IACvB,IAAI,CAACC,MAAM,GAAGD,KAAK,CAACE,IAAI,CAACT,MAAM,CAACI,aAAa,CAAC,CAAC;EACjD;EAEOF,SAAS;IACd,IAAI,CAACK,KAAK,CAACG,QAAQ,CAACR,SAAS,EAAE,CAAC;EAClC;EAEOD,SAAS;IACd,IAAI,CAACM,KAAK,CAACG,QAAQ,CAACT,SAAS,EAAE,CAAC;EAClC;EAEOE,KAAK,CAACQ,QAAgB;IAC3B,MAAMC,KAAK,GAAGC,QAAQ,CAACF,QAAQ,EAAE,EAAE,CAAC;IACpC,IAAI,CAACG,MAAM,CAACC,KAAK,CAACH,KAAK,CAAC,EAAE;MACxB,IAAI,CAACL,KAAK,CAACG,QAAQ,CAACP,KAAK,CAAC;QAAES;MAAK,CAAE,CAAC,CAAC;;EAEzC;;AApBWP,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCfjCC,0BAAI;MAAAA,4BAAY;MAAAA,iBAAK;MAErBA,yBAAG;MAC2BA,YAAoB;;MAAAA,iBAAS;MAG3DA,yBAAG;MACOA;QAAA,OAASC,eAAW;MAAA,EAAC;MAAgCD,iBAAC;MAAAA,iBAAS;MACvEA,iCAA6D;MAArDA;QAAA,OAASC,eAAW;MAAA,EAAC;MAAgCD,kBAAC;MAAAA,iBAAS;MAGzEA,0BAAG;MACDA,+BAAwD;MACxDA,kCAAgE;MAAxDA;QAAAA;QAAA;QAAA,OAASA,mCAAkB;MAAA,EAAC;MAA4BA,sBAAK;MAAAA,iBAAS;;;MAVlDA,eAAoB;MAApBA,sDAAoB","names":["select","decrement","increment","reset","selectCounter","NgRxCounterComponent","constructor","store","count$","pipe","dispatch","newCount","count","parseInt","Number","isNaN","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/bruno/Documents/GitHub/utilizando_cypress/src/app/components/ngrx-counter/ngrx-counter.component.ts","/home/bruno/Documents/GitHub/utilizando_cypress/src/app/components/ngrx-counter/ngrx-counter.component.html"],"sourcesContent":["import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport { decrement, increment, reset } from '../../actions/counter.actions';\nimport { CounterState } from '../../reducers/counter.reducer';\nimport { AppState } from '../../shared/app-state';\nimport { selectCounter } from '../../shared/selectors';\n\n@Component({\n  selector: 'app-ngrx-counter',\n  templateUrl: './ngrx-counter.component.html',\n  styleUrls: ['./ngrx-counter.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NgRxCounterComponent {\n  public count$: Observable<CounterState>;\n\n  constructor(private store: Store<AppState>) {\n    this.count$ = store.pipe(select(selectCounter));\n  }\n\n  public increment(): void {\n    this.store.dispatch(increment());\n  }\n\n  public decrement(): void {\n    this.store.dispatch(decrement());\n  }\n\n  public reset(newCount: string): void {\n    const count = parseInt(newCount, 10);\n    if (!Number.isNaN(count)) {\n      this.store.dispatch(reset({ count }));\n    }\n  }\n}\n","<h1>NgRx counter</h1>\n\n<p>\n  <strong data-testid=\"count\">{{ count$ | async }}</strong>\n</p>\n\n<p>\n  <button (click)=\"increment()\" data-testid=\"increment-button\">+</button>\n  <button (click)=\"decrement()\" data-testid=\"decrement-button\">-</button>\n</p>\n\n<p>\n  <input type=\"number\" #input data-testid=\"reset-input\" />\n  <button (click)=\"reset(input.value)\" data-testid=\"reset-button\">Reset</button>\n</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}