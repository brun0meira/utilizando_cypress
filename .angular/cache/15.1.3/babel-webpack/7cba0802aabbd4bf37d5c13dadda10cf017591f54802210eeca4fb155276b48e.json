{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/counter.service\";\nimport * as i2 from \"@angular/common\";\nexport class StandaloneServiceCounterComponent {\n  constructor(counterService) {\n    this.counterService = counterService;\n    this.count$ = this.counterService.getCount();\n  }\n  increment() {\n    this.counterService.increment();\n  }\n  decrement() {\n    this.counterService.decrement();\n  }\n  reset(newCount) {\n    const count = parseInt(newCount, 10);\n    if (!Number.isNaN(count)) {\n      this.counterService.reset(count);\n    }\n  }\n}\nStandaloneServiceCounterComponent.ɵfac = function StandaloneServiceCounterComponent_Factory(t) {\n  return new (t || StandaloneServiceCounterComponent)(i0.ɵɵdirectiveInject(i1.CounterService));\n};\nStandaloneServiceCounterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: StandaloneServiceCounterComponent,\n  selectors: [[\"app-standalone-service-counter\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 16,\n  vars: 3,\n  consts: [[\"data-testid\", \"count\"], [\"data-testid\", \"increment-button\", 3, \"click\"], [\"data-testid\", \"decrement-button\", 3, \"click\"], [\"type\", \"number\", \"data-testid\", \"reset-input\"], [\"input\", \"\"], [\"data-testid\", \"reset-button\", 3, \"click\"]],\n  template: function StandaloneServiceCounterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Standalone counter connected to the service\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\")(3, \"strong\", 0);\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"p\")(7, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function StandaloneServiceCounterComponent_Template_button_click_7_listener() {\n        return ctx.increment();\n      });\n      i0.ɵɵtext(8, \"+\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function StandaloneServiceCounterComponent_Template_button_click_9_listener() {\n        return ctx.decrement();\n      });\n      i0.ɵɵtext(10, \"-\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"p\");\n      i0.ɵɵelement(12, \"input\", 3, 4);\n      i0.ɵɵelementStart(14, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function StandaloneServiceCounterComponent_Template_button_click_14_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(13);\n        return i0.ɵɵresetView(ctx.reset(_r0.value));\n      });\n      i0.ɵɵtext(15, \"Reset\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 1, ctx.count$));\n    }\n  },\n  dependencies: [CommonModule, i2.AsyncPipe],\n  styles: [\"[_nghost-%COMP%] {\\n  display: block;\\n  margin-bottom: 1rem;\\n  border: 4px solid darkred;\\n  border-radius: 2px;\\n  padding: 0 1rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9zdGFuZGFsb25lLXNlcnZpY2UtY291bnRlci9zdGFuZGFsb25lLXNlcnZpY2UtY291bnRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsY0FBYztFQUNkLG1CQUFtQjtFQUNuQix5QkFBeUI7RUFDekIsa0JBQWtCO0VBQ2xCLGVBQWU7QUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICBib3JkZXI6IDRweCBzb2xpZCBkYXJrcmVkO1xuICBib3JkZXItcmFkaXVzOiAycHg7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAQ,iBAAiB;;;;AAe9C,OAAM,MAAOC,iCAAiC;EAG5CC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAChC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,cAAc,CAACE,QAAQ,EAAE;EAC9C;EAEOC,SAAS;IACd,IAAI,CAACH,cAAc,CAACG,SAAS,EAAE;EACjC;EAEOC,SAAS;IACd,IAAI,CAACJ,cAAc,CAACI,SAAS,EAAE;EACjC;EAEOC,KAAK,CAACC,QAAgB;IAC3B,MAAMC,KAAK,GAAGC,QAAQ,CAACF,QAAQ,EAAE,EAAE,CAAC;IACpC,IAAI,CAACG,MAAM,CAACC,KAAK,CAACH,KAAK,CAAC,EAAE;MACxB,IAAI,CAACP,cAAc,CAACK,KAAK,CAACE,KAAK,CAAC;;EAEpC;;AApBWT,iCAAiC;mBAAjCA,iCAAiC;AAAA;AAAjCA,iCAAiC;QAAjCA,iCAAiC;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCf9CC,0BAAI;MAAAA,2DAA2C;MAAAA,iBAAK;MAEpDA,yBAAG;MAC2BA,YAAoB;;MAAAA,iBAAS;MAG3DA,yBAAG;MACOA;QAAA,OAASC,eAAW;MAAA,EAAC;MAAgCD,iBAAC;MAAAA,iBAAS;MACvEA,iCAA6D;MAArDA;QAAA,OAASC,eAAW;MAAA,EAAC;MAAgCD,kBAAC;MAAAA,iBAAS;MAGzEA,0BAAG;MACDA,+BAAwD;MACxDA,kCAAgE;MAAxDA;QAAAA;QAAA;QAAA,OAASA,mCAAkB;MAAA,EAAC;MAA4BA,sBAAK;MAAAA,iBAAS;;;MAVlDA,eAAoB;MAApBA,sDAAoB;;;iBDQtCrB,YAAY;EAAAuB;AAAA","names":["CommonModule","StandaloneServiceCounterComponent","constructor","counterService","count$","getCount","increment","decrement","reset","newCount","count","parseInt","Number","isNaN","selectors","standalone","features","decls","vars","consts","template","i0","ctx","styles"],"sourceRoot":"","sources":["/home/bruno/Documents/GitHub/utilizando_cypress/src/app/components/standalone-service-counter/standalone-service-counter.component.ts","/home/bruno/Documents/GitHub/utilizando_cypress/src/app/components/standalone-service-counter/standalone-service-counter.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { CounterState } from '../../reducers/counter.reducer';\nimport { CounterService } from '../../services/counter.service';\n\n@Component({\n  standalone: true,\n  selector: 'app-standalone-service-counter',\n  imports: [CommonModule],\n  templateUrl: './standalone-service-counter.component.html',\n  styleUrls: ['./standalone-service-counter.component.css'],\n})\nexport class StandaloneServiceCounterComponent {\n  public count$: Observable<CounterState>;\n\n  constructor(private counterService: CounterService) {\n    this.count$ = this.counterService.getCount();\n  }\n\n  public increment(): void {\n    this.counterService.increment();\n  }\n\n  public decrement(): void {\n    this.counterService.decrement();\n  }\n\n  public reset(newCount: string): void {\n    const count = parseInt(newCount, 10);\n    if (!Number.isNaN(count)) {\n      this.counterService.reset(count);\n    }\n  }\n}\n","<h1>Standalone counter connected to the service</h1>\n\n<p>\n  <strong data-testid=\"count\">{{ count$ | async }}</strong>\n</p>\n\n<p>\n  <button (click)=\"increment()\" data-testid=\"increment-button\">+</button>\n  <button (click)=\"decrement()\" data-testid=\"decrement-button\">-</button>\n</p>\n\n<p>\n  <input type=\"number\" #input data-testid=\"reset-input\" />\n  <button (click)=\"reset(input.value)\" data-testid=\"reset-button\">Reset</button>\n</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}