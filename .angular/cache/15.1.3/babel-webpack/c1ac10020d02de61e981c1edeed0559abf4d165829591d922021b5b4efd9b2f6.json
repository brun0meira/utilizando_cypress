{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class CounterService {\n  constructor() {\n    // Technically, this property is not necessary since the BehaviorSubject\n    // below already holds the current count. We are keeping it for clarity.\n    this.count = 0;\n    this.subject = new BehaviorSubject(this.count);\n  }\n  // Every BehaviorSubject is an Observable and Observer.\n  // We do not want to expose the Observer trait to the outside,\n  // so we downcast the BehaviorSubject to a simple Observable only.\n  getCount() {\n    return this.subject.asObservable();\n  }\n  increment() {\n    this.count++;\n    this.notify();\n  }\n  decrement() {\n    this.count--;\n    this.notify();\n  }\n  reset(newCount) {\n    this.count = newCount;\n    this.notify();\n  }\n  notify() {\n    this.subject.next(this.count);\n  }\n}\nCounterService.ɵfac = function CounterService_Factory(t) {\n  return new (t || CounterService)();\n};\nCounterService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CounterService,\n  factory: CounterService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAGlD,OAAM,MAAOC,cAAc;EAOzBC;IANA;IACA;IACQ,UAAK,GAAG,CAAC;IAKf,IAAI,CAACC,OAAO,GAAG,IAAIH,eAAe,CAAC,IAAI,CAACI,KAAK,CAAC;EAChD;EAEA;EACA;EACA;EACOC,QAAQ;IACb,OAAO,IAAI,CAACF,OAAO,CAACG,YAAY,EAAE;EACpC;EAEOC,SAAS;IACd,IAAI,CAACH,KAAK,EAAE;IACZ,IAAI,CAACI,MAAM,EAAE;EACf;EAEOC,SAAS;IACd,IAAI,CAACL,KAAK,EAAE;IACZ,IAAI,CAACI,MAAM,EAAE;EACf;EAEOE,KAAK,CAACC,QAAgB;IAC3B,IAAI,CAACP,KAAK,GAAGO,QAAQ;IACrB,IAAI,CAACH,MAAM,EAAE;EACf;EAEQA,MAAM;IACZ,IAAI,CAACL,OAAO,CAACS,IAAI,CAAC,IAAI,CAACR,KAAK,CAAC;EAC/B;;AAnCWH,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAY,SAAdZ,cAAc;AAAA","names":["BehaviorSubject","CounterService","constructor","subject","count","getCount","asObservable","increment","notify","decrement","reset","newCount","next","factory"],"sourceRoot":"","sources":["/home/bruno/Documents/GitHub/utilizando_cypress/src/app/services/counter.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable()\nexport class CounterService {\n  // Technically, this property is not necessary since the BehaviorSubject\n  // below already holds the current count. We are keeping it for clarity.\n  private count = 0;\n\n  private subject: BehaviorSubject<number>;\n\n  constructor() {\n    this.subject = new BehaviorSubject(this.count);\n  }\n\n  // Every BehaviorSubject is an Observable and Observer.\n  // We do not want to expose the Observer trait to the outside,\n  // so we downcast the BehaviorSubject to a simple Observable only.\n  public getCount(): Observable<number> {\n    return this.subject.asObservable();\n  }\n\n  public increment(): void {\n    this.count++;\n    this.notify();\n  }\n\n  public decrement(): void {\n    this.count--;\n    this.notify();\n  }\n\n  public reset(newCount: number): void {\n    this.count = newCount;\n    this.notify();\n  }\n\n  private notify(): void {\n    this.subject.next(this.count);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}